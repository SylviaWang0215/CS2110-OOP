/* Time spent on a7:  hh hours and mm minutes.

 * Name: 
 * Netid: 
 * What I thought about this assignment:
 * 
 * 
 *
 */

package student;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import graph.Edge;
import graph.Node;

/** This class contains Dijkstra's shortest-path algorithm and some other methods. */
public class Paths {

    /** Return the shortest path from start to end, or the empty list if a path
     * does not exist.
     * Note: The empty list is NOT "null"; it is a list with 0 elements. */
    public static List<Node> shortestPath(Node start, Node end) {
        /* TODO Read note A7 FAQs on the course piazza for ALL details. */
    	Heap<Node> frontier = new Heap<Node>();
    	HashMap<Node, SFdata> shortestPaths = new HashMap<Node, SFdata>();
    	frontier.add(start, 0);
    	shortestPaths.put(start, new SFdata(0, null));
    	
    	while (frontier.size() != 0){
    		Node current = frontier.poll();
    		if (current.equals(end)) return constructPath(current, shortestPaths);
    		if (current.getExitsSize() == 0) return new LinkedList<Node>();
    		/*
    		HashMap<Node, Integer> frontierSet = current.getNeighbors();
    		for (Node t: frontierSet.keySet()){
    			if (!shortestPaths.containsKey(t)){
    				int distance = frontierSet.get(t) + shortestPaths.get(current).distance;
    				shortestPaths.put(t, new SFdata(distance, current));
    				frontier.add(t, shortestPaths.get(t).distance);
    			}
    			int totalDistance = shortestPaths.get(current).distance + frontierSet.get(t);    			
    			if (totalDistance < shortestPaths.get(t).distance){
    				shortestPaths.put(t, new SFdata(totalDistance, current));
    			}
    		}*/
    	}
    	
    	if (!shortestPaths.containsKey(end)){
    		return new LinkedList<Node>();
    	}
        
        return constructPath(end, shortestPaths);
    }

    /** Return the path from the start node to node end.
     *  Precondition: nData contains all the necessary information about
     *  the path. */
    public static List<Node> constructPath(Node end, HashMap<Node, SFdata> nData) {
        LinkedList<Node> path= new LinkedList<Node>();
        
        Node p= end;
        // invariant: All the nodes from p's successor to the end are in
        //            path, in reverse order.
        while (p != null) {
            path.addFirst(p);
            p= nData.get(p).backPointer;
        }
        return path;
    }

    /** Return the sum of the weights of the edges on path path. */
    public static int pathDistance(List<Node> path) {
        if (path.size() == 0) return 0;
        synchronized(path) {
            Iterator<Node> iter= path.iterator();
            Node p= iter.next();  // First node on path
            int s= 0;
            // invariant: s = sum of weights of edges from start to p
            while (iter.hasNext()) {
                Node q= iter.next();
                s= s + p.getEdge(q).length;
                p= q;
            }
            return s;
        }
    }

    /** An instance contains information about a node: the previous node
     *  on a shortest path from the start node to this node and the distance
     *  of this node from the start node. */
    private static class SFdata {
        private Node backPointer; // backpointer on path from start node to this one
        private int distance; // distance from start node to this one

        /** Constructor: an instance with distance d from the start node and
         *  backpointer p.*/
        private SFdata(int d, Node p) {
            distance= d;     // Distance from start node to this one.
            backPointer= p;  // Backpointer on the path (null if start node)
        }

        /** return a representation of this instance. */
        public String toString() {
            return "dist " + distance + ", bckptr " + backPointer;
        }
    }
}
